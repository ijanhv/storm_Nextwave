// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("NEXT_PUBLIC_DATABASE_URL")
}

model User {
  id             String      @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?     @unique
  image          String?
  hashedPassword String?
  emailVerified  DateTime?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  accounts       Account[]
  userEvents     UserEvent[]
  role           Role        @default(Attendee)
}

enum Role {
  Attendee
  Organizer
  Vendor
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String? @db.String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Event {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  eventType   String
  startDate   DateTime
  endDate     DateTime
  location    String
  description String?
  budget      Float?
  organizerId String?     @db.ObjectId
  attendees   UserEvent[]
  tasks       Task[]
  vendors     Vendor[]
  tickets     Ticket[]
}

model Ticket {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  price    Float
  quantity Int
  eventId  String @db.ObjectId
  event    Event  @relation(fields: [eventId], references: [id])
}

model UserEvent {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  eventId   String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, eventId])
}

model Task {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  dueDate   DateTime
  completed Boolean
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   String   @db.ObjectId
}

model Vendor {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  name                String        @unique
  contactPerson       String
  email               String        @unique
  phone               String
  category            String
  location            String
  description         String?
  pricing             String?
  rating              Float
  userId              String        @db.ObjectId
  bookingStatus       BookingStatus
  specialRequirements String?
  eventId             String?       @db.ObjectId
  event               Event?        @relation(fields: [eventId], references: [id])
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
}

enum BookingStatus {
  Available
  Booked
}
